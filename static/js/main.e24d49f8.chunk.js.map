{"version":3,"sources":["components/PostsList.tsx","utils/fetchClient.ts","api/serverData.tsx","components/Loader/Loader.tsx","components/NewCommentForm.tsx","components/PostDetails.tsx","components/UserSelector.tsx","App.tsx","index.tsx"],"names":["PostsList","posts","onPostDetails","useState","currentPostId","setCurrentPostId","className","map","post","id","title","type","classNames","onClick","clickHandler","BASE_URL","wait","delay","Promise","resolve","setTimeout","request","url","method","data","options","body","JSON","stringify","headers","then","fetch","response","json","client","getUserPosts","userId","Loader","NewCommentForm","onFormSubmit","isResponse","author","setAuthor","email","setEmail","comment","setComment","isLoading","setIsLoading","isSubmit","setIsSubmit","errorInputAuthor","trim","errorInputEmail","errorTextComment","onSubmit","e","preventDefault","newComment","postId","name","htmlFor","placeholder","value","onChange","target","PostDetails","isError","setIsError","comments","setComments","isClickOnWrite","setIsClickOnWrite","setIsResponce","loadPostComments","a","commentsFromServer","length","Notiflix","Notify","failure","postPostComment","prev","deletePostComment","commentId","filter","console","error","useEffect","href","UserSelector","users","onChooseUser","isClickedOnMenu","setIsClickedOnMenu","setTitle","selectedUser","setSelectedUser","prevState","role","user","App","setUsers","activeUserId","setActiveUserId","setPosts","activePost","setActivePost","isWarning","setIsWarning","loadUsers","usersFromServer","loadUserPosts","userPosts","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.e24d49f8.chunk.js","sourcesContent":["import classNames from 'classnames';\nimport React, { useState } from 'react';\nimport { Post } from '../types/Post';\n\ntype Props = {\n  posts: Post[],\n  onPostDetails: (post:Post) => void,\n};\n\nexport const PostsList: React.FC<Props> = ({ posts, onPostDetails }) => {\n  const [currentPostId, setCurrentPostId] = useState(-1);\n\n  const clickHandler = (post:Post) => {\n    setCurrentPostId(post.id);\n    onPostDetails(post);\n    if (currentPostId === post.id) {\n      setCurrentPostId(-1);\n    }\n  };\n\n  return (\n    <div data-cy=\"PostsList\">\n      <p className=\"title\">Posts:</p>\n\n      <table className=\"table is-fullwidth is-striped is-hoverable is-narrow\">\n        <thead>\n          <tr className=\"has-background-link-light\">\n            <th>#</th>\n            <th>Title</th>\n            <th> </th>\n          </tr>\n        </thead>\n\n        <tbody>\n          {posts.map((post) => {\n            return (\n              <tr data-cy=\"Post\" key={post.id}>\n                <td data-cy=\"PostId\">{post.id}</td>\n\n                <td data-cy=\"PostTitle\">\n                  {post.title}\n                </td>\n\n                <td className=\"has-text-right is-vcentered\">\n                  <button\n                    type=\"button\"\n                    data-cy=\"PostButton\"\n                    className={classNames('button is-link',\n                      { 'is-light': currentPostId !== post.id })}\n                    onClick={() => clickHandler(post)}\n                  >\n                    {currentPostId === post.id ? 'Closed' : ' Open'}\n                  </button>\n                </td>\n              </tr>\n            );\n          }) }\n        </tbody>\n      </table>\n    </div>\n  );\n};\n","const BASE_URL = 'https://mate.academy/students-api';\n\n// a promise resolved after a given delay\nfunction wait(delay: number) {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\n// To have autocompletion and avoid mistypes\ntype RequestMethod = 'GET' | 'POST' | 'PATCH' | 'DELETE';\n\nfunction request<T>(\n  url: string,\n  method: RequestMethod = 'GET',\n  data: any = null, // we can send any data to the server\n): Promise<T> {\n  const options: RequestInit = { method };\n\n  if (data) {\n    // We add body and Content-Type only for the requests with data\n    options.body = JSON.stringify(data);\n    options.headers = {\n      'Content-Type': 'application/json; charset=UTF-8',\n    };\n  }\n\n  // for a demo purpose we emulate a delay to see if Loaders work\n  return wait(300)\n    .then(() => fetch(BASE_URL + url, options))\n    .then(response => response.json());\n}\n\nexport const client = {\n  get: <T>(url: string) => request<T>(url),\n  post: <T>(url: string, data: any) => request<T>(url, 'POST', data),\n  patch: <T>(url: string, data: any) => request<T>(url, 'PATCH', data),\n  delete: (url: string) => request(url, 'DELETE'),\n};\n","import { Post } from '../types/Post';\nimport { User } from '../types/User';\nimport { Comment, CommentData } from '../types/Comment';\nimport { client } from '../utils/fetchClient';\n\nexport const getUsers = () => {\n  return client.get<User[]>('/users');\n};\n\nexport const getUserPosts = (userId: number) => {\n  return client.get<Post[]>(`/posts?userId=${userId}`);\n};\n\nexport const getComments = (postId: number) => {\n  return client.get<Comment[]>(`/comments?postId=${postId}`);\n};\n\nexport const postComment = (commentToPost: CommentData) => {\n  return client.post<Comment>('/comments', commentToPost);\n};\n\nexport const deleteComment = (commentToDelete: number) => {\n  return client.delete(`/comments/${commentToDelete}`);\n};\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import React, { useState } from 'react';\nimport classNames from 'classnames';\nimport { CommentData } from '../types/Comment';\n\ntype Props = {\n  onFormSubmit: (comment: CommentData) => void,\n  isResponse: boolean,\n  currentPostId: number,\n};\n\nexport const NewCommentForm: React.FC<Props> = ({\n  onFormSubmit,\n  isResponse,\n  currentPostId,\n}) => {\n  const [author, setAuthor] = useState('');\n  const [email, setEmail] = useState('');\n  const [comment, setComment] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const [isSubmit, setIsSubmit] = useState(false);\n\n  const submitHandler = (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n\n    setIsSubmit(true);\n    if (!author.trim() || !email.trim() || !comment.trim()) {\n      return;\n    }\n\n    const newComment = {\n      postId: currentPostId,\n      name: author,\n      email,\n      body: comment,\n    };\n\n    setIsLoading(true);\n    setComment(' ');\n    onFormSubmit(newComment);\n    setIsSubmit(false);\n  };\n\n  const errorInputAuthor = isSubmit && !author.trim();\n  const errorInputEmail = isSubmit && !email.trim();\n  const errorTextComment = isSubmit && !comment.trim();\n\n  return (\n    <form\n      data-cy=\"NewCommentForm\"\n      onSubmit={submitHandler}\n    >\n      <div className=\"field\" data-cy=\"NameField\">\n        <label className=\"label\" htmlFor=\"comment-author-name\">\n          Author Name\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"name\"\n            id=\"comment-author-name\"\n            placeholder=\"Name Surname\"\n            className={classNames('input', { 'is-danger': errorInputAuthor })}\n            value={author}\n            onChange={(e) => setAuthor(e.target.value)}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-user\" />\n          </span>\n\n          {errorInputAuthor && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n        </div>\n\n        {errorInputAuthor && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Name is required\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"EmailField\">\n        <label className=\"label\" htmlFor=\"comment-author-email\">\n          Author Email\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"email\"\n            id=\"comment-author-email\"\n            placeholder=\"email@test.com\"\n            className={classNames('input', { 'is-danger': errorInputEmail })}\n            value={email}\n            onChange={(e) => setEmail(e.target.value)}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-envelope\" />\n          </span>\n\n          {errorInputEmail && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n        </div>\n\n        {errorInputEmail && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Email is required\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"BodyField\">\n        <label className=\"label\" htmlFor=\"comment-body\">\n          Comment Text\n        </label>\n\n        <div className=\"control\">\n          <textarea\n            id=\"comment-body\"\n            name=\"body\"\n            placeholder=\"Type comment here\"\n            className={classNames(\n              'textarea', { 'is-danger': errorTextComment },\n            )}\n            value={comment}\n            onChange={(e) => setComment(e.target.value)}\n          />\n        </div>\n\n        {errorTextComment && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Enter some text\n          </p>\n        )}\n      </div>\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            type=\"submit\"\n            className={classNames(\n              'button is-link', {\n                'is-loading': isLoading && !isResponse,\n              },\n            )}\n            // onClick={() => setIsLoading(true)}\n          >\n            Add\n          </button>\n        </div>\n\n        <div className=\"control\">\n          {/* eslint-disable-next-line react/button-has-type */}\n          <button\n            type=\"reset\"\n            className=\"button is-link is-light\"\n            onClick={() => {\n              setAuthor('');\n              setEmail('');\n              setComment('');\n              setIsSubmit(false);\n            }}\n          >\n            Clear\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n};\n","/* eslint-disable no-console */\n/* eslint-disable @typescript-eslint/no-unused-expressions */\nimport React, { useEffect, useState } from 'react';\nimport Notiflix from 'notiflix';\nimport { deleteComment, getComments, postComment } from '../api/serverData';\nimport { Post } from '../types/Post';\nimport { Comment, CommentData } from '../types/Comment';\nimport { Loader } from './Loader';\nimport { NewCommentForm } from './NewCommentForm';\n\ntype Props = {\n  post: Post,\n};\n\nexport const PostDetails: React.FC<Props> = ({ post }) => {\n  const [isError, setIsError] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const [comments, setComments] = useState<Comment[]>([]);\n  const [isClickOnWrite, setIsClickOnWrite] = useState(false);\n  const [isResponse, setIsResponce] = useState(false);\n\n  const loadPostComments = async () => {\n    try {\n      setIsError(false);\n      setIsLoading(true);\n      const commentsFromServer = await getComments(post.id);\n\n      if (commentsFromServer.length) {\n        setComments(commentsFromServer);\n      }\n    } catch {\n      setIsError(true);\n      Notiflix.Notify.failure('Can`t get comments.Please try again');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const postPostComment = async (comment: CommentData) => {\n    try {\n      setIsResponce(false);\n      const postCommentOnServer = await postComment(comment);\n\n      if (postCommentOnServer) {\n        setComments(prev => [...prev, { ...comment, id: 0 }]);\n      }\n    } catch {\n      Notiflix.Notify.failure(\n        'Can`t add comment rigth now.Please try again later',\n      );\n    } finally {\n      setIsResponce(true);\n    }\n  };\n\n  const deletePostComment = (commentId: number) => {\n    try {\n      deleteComment(commentId);\n\n      setComments(prev => prev.filter(comment => comment.id !== commentId));\n    } catch {\n      console.error;\n    }\n  };\n\n  useEffect(() => {\n    loadPostComments();\n    setIsClickOnWrite(false);\n\n    return () => setComments([]);\n  }, [post.id]);\n\n  const { id, title, body } = post;\n\n  return (\n    <div className=\"content\" data-cy=\"PostDetails\">\n      <div className=\"content\" data-cy=\"PostDetails\">\n        <div className=\"block\">\n          <h2 data-cy=\"PostTitle\">\n            #\n            {id}\n            :\n            {' '}\n            {title}\n          </h2>\n\n          <p data-cy=\"PostBody\">\n            {body}\n          </p>\n        </div>\n        <div className=\"block\">\n          {isLoading\n          && <Loader />}\n\n          {isError && (\n            <div className=\"notification is-danger\" data-cy=\"CommentsError\">\n              Something went wrong\n            </div>\n          )}\n\n          {!comments.length\n            ? (\n              <p className=\"title is-4\" data-cy=\"NoCommentsMessage\">\n                No comments yet\n              </p>\n            ) : (\n              <>\n                <p className=\"title is-4\">Comments:</p>\n                {comments.map(comment => {\n                  return (\n                    <article\n                      className=\"message is-small\"\n                      data-cy=\"Comment\"\n                      key={comment.id}\n                    >\n                      <div className=\"message-header\">\n                        <a\n                          href={`mailto:${comment.email}`}\n                          data-cy=\"CommentAuthor\"\n                        >\n                          {comment.name}\n                        </a>\n                        <button\n                          data-cy=\"CommentDelete\"\n                          type=\"button\"\n                          className=\"delete is-small\"\n                          aria-label=\"delete\"\n                          onClick={() => {\n                            deletePostComment(comment.id);\n                          }}\n                        >\n                          delete button\n                        </button>\n                      </div>\n\n                      <div className=\"message-body\" data-cy=\"CommentBody\">\n                        {comment.body}\n                      </div>\n                    </article>\n                  );\n                })}\n              </>\n            )}\n\n          {!isClickOnWrite && (\n            <button\n              data-cy=\"WriteCommentButton\"\n              type=\"button\"\n              className=\"button is-link\"\n              onClick={() => setIsClickOnWrite(true)}\n            >\n              Write a comment\n            </button>\n          )}\n        </div>\n\n        {isClickOnWrite && (\n          <NewCommentForm\n            onFormSubmit={postPostComment}\n            isResponse={isResponse}\n            currentPostId={id}\n          />\n        )}\n      </div>\n    </div>\n  );\n};\n","import classNames from 'classnames';\nimport React, { useState } from 'react';\nimport { User } from '../types/User';\n\ntype Props = {\n  users: User[],\n  onChooseUser: (userId:number) => void,\n};\n\nexport const UserSelector: React.FC<Props> = ({\n  users,\n  onChooseUser,\n}) => {\n  const [isClickedOnMenu, setIsClickedOnMenu] = useState(false);\n  const [title, setTitle] = useState('Choose a user');\n  const [selectedUser, setSelectedUser] = useState(-1);\n\n  return (\n    <div\n      data-cy=\"UserSelector\"\n      className=\"dropdown is-active\"\n    >\n      <div className=\"dropdown-trigger\">\n        <button\n          type=\"button\"\n          className=\"button\"\n          aria-haspopup=\"true\"\n          aria-controls=\"dropdown-menu\"\n          onClick={() => setIsClickedOnMenu(prevState => !prevState)}\n        >\n          <span>{title}</span>\n\n          <span className=\"icon is-small\">\n            <i className=\"fas fa-angle-down\" aria-hidden=\"true\" />\n          </span>\n        </button>\n      </div>\n\n      {isClickedOnMenu && (\n        <div className=\"dropdown-menu\" id=\"dropdown-menu\" role=\"menu\">\n          <div className=\"dropdown-content\">\n            {users.map(user => {\n              return (\n                <a\n                  key={user.id}\n                  href=\"{`#user-&{user.id}`}\"\n                  className={classNames(\n                    'dropdown-item', { 'is-active': user.id === selectedUser },\n                  )}\n                  onClick={() => {\n                    onChooseUser(user.id);\n                    setSelectedUser(user.id);\n                    setIsClickedOnMenu(false);\n                    setTitle(user.name);\n                  }}\n                >\n                  {user.name}\n                </a>\n              );\n            })}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n","/* eslint-disable @typescript-eslint/no-unused-expressions */\n/* eslint-disable no-console */\nimport React, { useEffect, useState } from 'react';\nimport Notiflix from 'notiflix';\nimport 'bulma/bulma.sass';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport './App.scss';\n\nimport classNames from 'classnames';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { UserSelector } from './components/UserSelector';\nimport { Loader } from './components/Loader';\nimport { getUsers, getUserPosts } from './api/serverData';\nimport { User } from './types/User';\nimport { Post } from './types/Post';\n\nexport const App: React.FC = () => {\n  const [users, setUsers] = useState<User[]>([]);\n  const [activeUserId, setActiveUserId] = useState(-1);\n  const [posts, setPosts] = useState<Post[]>([]);\n  const [activePost, setActivePost] = useState<Post | null>(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const [isError, setIsError] = useState(false);\n  const [isWarning, setIsWarning] = useState(false);\n\n  const loadUsers = async () => {\n    try {\n      const usersFromServer = await getUsers();\n\n      if (usersFromServer) {\n        setUsers(usersFromServer);\n      }\n    } catch {\n      setIsError(true);\n      Notiflix.Notify.failure('Can`t get users. Please try again');\n    }\n  };\n\n  const loadUserPosts = async (userId: number) => {\n    try {\n      setIsLoading(true);\n      setIsWarning(false);\n      setIsError(false);\n      const userPosts = await getUserPosts(userId);\n\n      userPosts.length > 1\n        ? setPosts(userPosts)\n        : setIsWarning(true);\n    } catch {\n      setIsError(true);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    loadUsers();\n  }, []);\n\n  const setActiveUserOnClick = (userId:number) => {\n    setActiveUserId(userId);\n    loadUserPosts(userId);\n  };\n\n  const setActivePostOnClick = (post: Post) => {\n    setActivePost(post);\n  };\n\n  return (\n    <main className=\"section\">\n      <div className=\"container\">\n        <div className=\"tile is-ancestor\">\n          <div className=\"tile is-parent\">\n            <div className=\"tile is-child box is-success\">\n              <div className=\"block\">\n                <UserSelector\n                  users={users}\n                  onChooseUser={setActiveUserOnClick}\n                />\n              </div>\n\n              <div className=\"block\" data-cy=\"MainContent\">\n                {activeUserId < 0 && (\n                  <p data-cy=\"NoSelectedUser\">\n                    No user selected\n                  </p>\n                )}\n\n                {isLoading && <Loader />}\n\n                {isError && (\n                  <div\n                    className=\"notification is-danger\"\n                    data-cy=\"PostsLoadingError\"\n                  >\n                    Something went wrong!\n                  </div>\n                )}\n\n                {isWarning && (\n                  <div className=\"notification is-warning\" data-cy=\"NoPostsYet\">\n                    No posts yet\n                  </div>\n                )}\n\n                {posts.length > 0 && (\n                  <PostsList\n                    posts={posts}\n                    onPostDetails={setActivePostOnClick}\n                  />\n                )}\n              </div>\n            </div>\n          </div>\n\n          <div\n            data-cy=\"Sidebar\"\n            className={classNames(\n              'tile',\n              'is-parent',\n              'is-8-desktop',\n              'Sidebar',\n              { 'Sidebar--open': activePost },\n            )}\n          >\n            { activePost && (\n              <div className=\"tile is-child box is-success \">\n                <PostDetails post={activePost} />\n              </div>\n            )}\n          </div>\n        </div>\n      </div>\n    </main>\n  );\n};\n","import ReactDOM from 'react-dom';\n\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}